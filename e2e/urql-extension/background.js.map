{"version":3,"sources":["urql-devtools:///webpack/bootstrap","urql-devtools:///./src/extension/background.ts","urql-devtools:///./src/util/EventTarget.ts","urql-devtools:///./src/util/debug.ts","urql-devtools:///./src/types/connections.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","targets","addToTarget","tabId","port","source","undefined","BackgroundEventTarget","target","portName","debug","addEventListener","a","postMessage","onMessage","addListener","e","message","dispatchEvent","onDisconnect","removeEventListener","type","connectionHandlers","ContentScriptConnectionName","sender","tab","id","chrome","pageAction","setIcon","path","DevtoolsPanelConnectionName","initialListener","msg","removeListener","console","error","runtime","onConnect","handler","callback","this","listeners","event","values","forEach","f","connectedSources","keys"],"mappings":"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","file":"background.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 134);\n","import { DevtoolsMessage } from \"@urql/devtools\";\nimport {\n  ContentScriptConnectionName,\n  DevtoolsPanelConnectionName,\n} from \"../types\";\nimport { debug, BackgroundEventTarget } from \"../util\";\n\n/** Collection of targets grouped by tabId. */\nconst targets: Record<number, BackgroundEventTarget> = {};\n\ntype AddToTargetArgs = {\n  tabId: number;\n  source: \"exchange\" | \"devtools\";\n  port: chrome.runtime.Port;\n};\n\n/** Ensures all messages are forwarded to and from tab connections. */\nconst addToTarget = ({ tabId, port, source }: AddToTargetArgs) => {\n  if (targets[tabId] === undefined) {\n    targets[tabId] = new BackgroundEventTarget();\n  }\n\n  const target = targets[tabId];\n  const portName = port.name;\n\n  debug(\"Connect: \", { tabId, portName });\n  target.addEventListener(portName, (a) => port.postMessage(a));\n\n  port.onMessage.addListener((e) => {\n    debug(\"Message: \", { tabId, portName, message: e });\n    target.dispatchEvent(portName, e);\n  });\n  port.onDisconnect.addListener(() => {\n    debug(\"Disconnect: \", { tabId, portName });\n    target.removeEventListener(portName);\n    target.dispatchEvent(portName, { type: \"connection-disconnect\", source });\n  });\n};\n\n/** Handle initial connection from content script. */\nconst handleContentScriptConnection = (port: chrome.runtime.Port) => {\n  if (port?.sender?.tab?.id) {\n    const tabId = port.sender.tab.id;\n\n    addToTarget({ tabId, port, source: \"exchange\" });\n    chrome.pageAction.setIcon({ tabId, path: \"/assets/icon-32.png\" });\n    port.onDisconnect.addListener(() => {\n      chrome.pageAction.setIcon(\n        {\n          tabId,\n          path: \"/assets/icon-disabled-32.png\",\n        },\n        () => true\n      );\n    });\n  }\n};\n\n/** Handle initial connection from devtools panel. */\nconst handleDevtoolsPanelConnection = (port: chrome.runtime.Port) => {\n  const source = \"devtools\";\n  const initialListener = (msg: DevtoolsMessage) => {\n    debug(\"Devtools Initial Message: \", { msg });\n    if (msg.type !== \"connection-init\") {\n      return;\n    }\n\n    // tabId is required when working with chrome extension\n    if (msg.tabId === undefined) {\n      console.error(\n        \"Recieved devtools panel connection but no tabId was specified.\"\n      );\n      return;\n    }\n\n    addToTarget({ tabId: msg.tabId, port, source });\n    targets[msg.tabId].dispatchEvent(source, msg);\n\n    port.onMessage.removeListener(initialListener);\n  };\n\n  port.onMessage.addListener(initialListener);\n};\n\nconst connectionHandlers: Record<string, (p: chrome.runtime.Port) => void> = {\n  [ContentScriptConnectionName]: handleContentScriptConnection,\n  [DevtoolsPanelConnectionName]: handleDevtoolsPanelConnection,\n};\n\nchrome.runtime.onConnect.addListener((port) => {\n  const handler = connectionHandlers[port.name];\n  return handler && handler(port);\n});\n","/** A shared EventTarget for dispatching messages to connected peers. */\nexport class BackgroundEventTarget<T extends any = any> {\n  private listeners: Record<string, Handler<T> | undefined> = {};\n\n  public addEventListener(source: string, callback: Handler<T>): void {\n    this.listeners[source] = callback;\n  }\n\n  public removeEventListener(source: string): void {\n    this.listeners[source] = undefined;\n  }\n\n  /** Dispatches event to all listeners excluding source */\n  public dispatchEvent(source: string, event: T): void {\n    const targets = { ...this.listeners, [source]: undefined };\n    Object.values(targets).forEach((f) => f && f(event));\n  }\n\n  public connectedSources(): string[] {\n    return Object.keys(this.listeners);\n  }\n}\n\ntype Handler<T> = (e: T) => void;\n","export const debug =\n  process.env.NODE_ENV !== \"production\" ? console.log : () => undefined;\n","export const ContentScriptConnectionName = \"exchange\" as const;\n\nexport const DevtoolsPanelConnectionName = \"devtools\" as const;\n"],"sourceRoot":""}